/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include "include/SerialPortJNI.h"
#include "include/SerialPortLog.h"
#include "include/SerialPort.h"
/* Header for class top_keepempty_sph_library_SerialPortJNI */
SerialPort serialPort;
/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    openPort
 * Signature: (Ljava/lang/String;IIIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_top_keepempty_sph_library_SerialPortJNI_openPort
        (JNIEnv *env, jclass jclazz, jstring path, jint baudRate, jint dataBits, jint stopBits, jchar parity){

    try {
        SerialPortConfig config;
        config = SerialPortConfig();
        config.baudrate = baudRate;
        config.databits = dataBits;
        config.stopbits = stopBits;
        config.parity = parity;
        serialPort = SerialPort(env->GetStringUTFChars(path, 0));
        return serialPort.openSerialPort(config);
    } catch (char *exception) {
        LOGE("Open device is error! Message:%s", exception);
        return FALSE;
    }
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    readPort
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_top_keepempty_sph_library_SerialPortJNI_readPort
        (JNIEnv * env, jclass jclazz, jint maxSize){
    BYTE buf[maxSize];
    int len;
    len = serialPort.readData(buf, maxSize);
    if(len < 1) return NULL;
    jbyteArray byteArray;
    jbyte *bytes = reinterpret_cast<jbyte *>(buf);
    byteArray = env->NewByteArray(len);
    env->SetByteArrayRegion(byteArray, 0, len, bytes);
    return byteArray;
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    writePort
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_top_keepempty_sph_library_SerialPortJNI_writePort
        (JNIEnv *env, jclass jclazz, jbyteArray data){
    jbyte *array = env->GetByteArrayElements(data, 0);
    BYTE *bytes = reinterpret_cast<BYTE *>(array);
    jsize arrayLength = env->GetArrayLength(data);
    serialPort.writeData(bytes, (int)arrayLength);
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    setMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_top_keepempty_sph_library_SerialPortJNI_setMode
  (JNIEnv *env, jclass, jint mode){
   return serialPort.setMode(mode);
}


/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    closePort
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_top_keepempty_sph_library_SerialPortJNI_closePort
        (JNIEnv *, jclass){
    serialPort.closePort();
    serialPort = NULL;
}

